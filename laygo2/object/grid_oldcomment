## line 1462

  '''
    def summarize(self):
        """Returns the summary of the grid information."""
        return self.__repr__() + " " \
                                 "name: " + self.name + ", " + \
                                 "class: " + self.__class__.__name__ + ", " + \
                                 " width:" + str(self.width) + \
                                 " height:" + str(self.height)

    def export(self, fmt='dict'):
        """Exports the object information."""
        if fmt == 'dict':
            return self.export_dict()

    def export_dict(self):
        """Exports the object information as a dictionary."""
        export_dict={'type': self.type,
                     'xy0': self.xy0.tolist(),
                     'xy1': self.xy1.tolist(),
                     'xgrid': self.xgrid.tolist(),
                     'ygrid': self.ygrid.tolist(),
                     }
        return export_dict

    def _add_grid(self, grid, v):
        """
        add a grid coordinate

        Parameters
        ----------
        grid : np.array
            grid array
        v : float
            value

        Returns
        -------
        np.array
            updated grid array
        """
        grid.append(v)
        grid.sort()
        return grid

    def add_xgrid(self, x):
        """
        add a coordinate value to grid in x direction

        Parameters
        ----------
        x : float
            value to be added
        """
        self.xgrid=self._add_grid(self.xgrid, x)

    def add_ygrid(self, y):
        """
        add a coordinate value to grid in y direction

        Parameters
        ----------
        y : float
            value to be added
        """
        self.ygrid=self._add_grid(self.ygrid, y)

    def get_xgrid(self):
        """use laygo2.GridObject.GridObject.xgrid instead"""
        return self.xgrid

    def get_ygrid(self):
        """use laygo2.GridObject.GridObject.ygrid instead"""
        return self.ygrid

    #abstract to physical conversion functions
    def _get_absgrid_coord(self, v, grid, size, method='ceil'):
        """
        Convert physical value to abstract value on grid. Since physical values are continuous and grid values are
        discrete, boundary conditions are need to be defined for the conversion.
        Default (and only supported in the current version) converting method is ceil, which is described as follows:
        #   physical grid: 0----grid0----grid1----grid2----...----gridN---size
        # abstracted grid: 0  0   0    1   1    2   2           N   N   N+1
        The ceiling method works well with stacked grids. For example, in the example, phyical values ranging from
        (larger than) GridN to (equal to) gridN+1 (grid0 of the second stack) will be converted to N+1.

        Parameters
        ----------
        v : float
            grid value
        grid : np.array
            grid array
        size : float
            grid size
        method : str, optional
            converting method

        Returns
        -------
        int
            abstract grid value
        """
        quo=np.floor(np.divide(v, size))
        mod=v-quo*size #mod=np.mod(v, size) not working well
        mod_ongrid=np.searchsorted(grid+1e-10, mod) #add 1e-10 to handle floating point precision errors
        #print('physical:' + str(v.tolist()) + ' size:'+ str(size) +
        #      ' quo:' + str(quo.tolist()) + ' mod:' + str(mod) +
        #      ' abs:' + str(np.add(np.multiply(quo,grid.shape[0]), mod_ongrid).tolist()))
        return np.add(np.multiply(quo,grid.shape[0]), mod_ongrid)

    def get_absgrid_coord_x(self, x): return self.get_absgrid_x(x)
    def get_absgrid_x(self, x):
        """
        Convert a physical x coordinate to a corresponding value in abstract grid

        Parameters
        ----------
        x : float
            value

        Returns
        -------
        int
            converted value
        """
        return self._get_absgrid_coord(x, self.xgrid, self.width).astype(int)

    def get_absgrid_coord_y(self, y): return self.get_absgrid_y(y)
    def get_absgrid_y(self, y):
        """
        Convert a physical y coordinate to a corresponding value in abstract grid

        Parameters
        ----------
        y : float
            value

        Returns
        -------
        int
            converted value
        """
        return self._get_absgrid_coord(y, self.ygrid, self.height).astype(int)

    def get_absgrid_coord_xy(self, xy): return self.get_absgrid_xy(xy)
    def get_absgrid_xy(self, xy):
        """
        Convert a physical xy coordinate to a corresponding vector in abstract grid

        Parameters
        ----------
        xy : np.array([float, float])

        Returns
        -------
        np.array([int, int])
        """
        _xy=np.vstack((self.get_absgrid_x(xy.T[0]), self.get_absgrid_y(xy.T[1]))).T
        if _xy.shape[0]==1: return _xy[0]
        else: return _xy

    def get_absgrid_coord_region(self, xy0, xy1): return self.get_absgrid_region(xy0, xy1)
    def get_absgrid_region(self, xy0, xy1):
        """
        Convert a physical regin to a corresponding region in abstract grid

        Parameters
        ----------
        xy0 : np.array([float, float])
            first coordinate
        xy1 : np.array([float, float])
            second coordinate

        Returns
        -------
        np.array([[int, int], [int, int]])
            converted coordinate
        """
        _xy0 = np.vstack((self.get_absgrid_coord_x(xy0.T[0]), self.get_absgrid_coord_y(xy0.T[1]))).T
        _xy1 = np.vstack((self.get_absgrid_coord_x(xy1.T[0]), self.get_absgrid_coord_y(xy1.T[1]))).T
        if _xy0.shape[0] == 1: _xy0 = _xy0[0]
        if _xy1.shape[0] == 1: _xy1 = _xy1[0]
        #upper right boundary adjust
        #check by re-converting to physical grid and see if the points are within original [xy0, xy1]
        #xy0_check = self.get_phygrid_coord_xy(_xy0)[0]
        #xy1_check = self.get_phygrid_coord_xy(_xy1)[0]
        xy0_check = self.get_phygrid_xy(_xy0)
        xy1_check = self.get_phygrid_xy(_xy1)
        xy0_check = np.around(xy0_check, decimals=self.max_resolution)
        xy1_check = np.around(xy1_check, decimals=self.max_resolution)
        xy0 = np.around(xy0, decimals=self.max_resolution)
        xy1 = np.around(xy1, decimals=self.max_resolution)
        #print("phy:" + str(xy0) + " " + str(xy1) + " abs:" + str(_xy0) + " " + str(_xy1) + " chk:" + str(xy0_check) + " " + str(xy1_check))
        if xy0_check[0] > xy0[0] and xy0_check[0] > xy1[0]: _xy0[0] -= 1
        if xy1_check[0] > xy0[0] and xy1_check[0] > xy1[0]: _xy1[0] -= 1
        if xy0_check[1] > xy0[1] and xy0_check[1] > xy1[1]: _xy0[1] -= 1
        if xy1_check[1] > xy0[1] and xy1_check[1] > xy1[1]: _xy1[1] -= 1
        #if _xy1[1]==7:
        #    print("phy:"+str(xy0)+" "+str(xy1)+" abs:"+str(_xy0)+" "+str(_xy1)+" chk:"+str(xy0_check)+" "+str(xy1_check))
        #print(xy1)

        return(np.vstack((_xy0, _xy1)))

    # physical to abstract conversion functions
    def _get_phygrid_coord(self, v, grid, size):
        """
        Internal function for abstract to physical coordinate conversions

        Parameters
        ----------
        v : int
            value in abstract coordinate
        grid : np.array
            grid array
        size : float
            grid size

        Returns
        -------
        float
            value in physical coordinate
        """
        quo = np.floor(np.divide(v, grid.shape[0]))
        mod = np.mod(v, grid.shape[0])  # mod = v - quo * grid.shape[0]
        return np.add(np.multiply(quo, size), np.take(grid, mod))

    def get_phygrid_coord_x(self, x): return self.get_phygrid_x(x)
    def get_phygrid_x(self, x):
        """
        Get the physical value of a abstract x coordinate

        Parameters
        ----------
        x : int
            abstract coordinate value

        Returns
        -------
        float
            physical coordinate value
        """
        return self._get_phygrid_coord(x, self.xgrid, self.width)

    def get_phygrid_coord_y(self, y): return self.get_phygrid_y(y)
    def get_phygrid_y(self, y):
        """
        Get the physical value of a abstract y coordinate

        Parameters
        ----------
        y : int
            abstract coordinate value

        Returns
        -------
        float
            physical coordinate value
        """
        return self._get_phygrid_coord(y, self.ygrid, self.height)

    def get_phygrid_coord_xy(self, xy): return self.get_phygrid_xy(xy)
    def get_phygrid_xy(self, xy):
        """
        Get the physical value of a abstract vector

        Parameters
        ----------
        xy : np.array([int, int])
            abstract coordinate vector

        Returns
        -------
        np.array([float, float])
            physical coordinate vector
        """
        if xy.ndim==1: #single coordinate
            return np.vstack((self.get_phygrid_coord_x(xy.T[0]), self.get_phygrid_coord_y(xy.T[1]))).T[0]
        else:
            return np.vstack((self.get_phygrid_coord_x(xy.T[0]), self.get_phygrid_coord_y(xy.T[1]))).T


class PlacementGrid(GridObject):
    """
    Placement grid class
    """
    type = 'placement'


class RouteGrid(GridObject):
    """
    Routing grid class
    """
    type = 'route'
    """str: type of grid. can be 'native', 'route', 'placement'"""
    xwidth = np.array([])
    """np.array: width of xgrid"""
    ywidth = np.array([])
    """np.array: width of ygrid"""
    viamap = dict()
    """dict: via map information"""
    xlayer = None
    """list: layer of xgrid"""
    ylayer = None
    """list: layer of ygrid"""

    def __init__(self, name, libname, xy, xgrid, ygrid, xwidth, ywidth, xlayer=None, ylayer=None, viamap=None):
        """
        Constructor
        """
        self.name = name
        self.libname = libname
        self.xy = xy
        self.xgrid = xgrid
        self.ygrid = ygrid
        self.xwidth = xwidth
        self.ywidth = ywidth
        self.xlayer = xlayer
        self.ylayer = ylayer
        self.viamap = viamap

    def _get_route_width(self, v, _width):
        """
        Get metal width

        Parameters
        ----------
        v : int
            value
        _width : np.array
            width vector

        Returns
        -------
        float
            route width
        """
        #quo=np.floor(np.divide(v, self._width.shape[0]))
        mod=np.mod(v, _width.shape[0])
        #if not isinstance(mod, int):
        #    print(v, _width, mod)
        return _width[round(np.round(mod))]

    def _get_route_layer(self, v, _layer):
        """
        Get metal layer

        Parameters
        ----------
        v : int
            index value
        _layer : list
            layer list

        Returns
        -------
        [str, str]
            route layer
        """
        mod=np.mod(v, len(_layer))
        return _layer[mod]

    #def get_xwidth(self): return self.xwidth
    #def get_ywidth(self): return self.ywidth
    #def get_viamap(self): return self.viamap

    def get_route_width_xy(self, xy):
        """
        Get metal width vector

        Parameters
        ----------
        xy : np.array([int, int])
            coordinate

        Returns
        -------
        np.array([float, float])
            route width vector ([xgrid, ygrid])
        """
        return np.array([self._get_route_width(xy[0], self.xwidth),
                         self._get_route_width(xy[1], self.ywidth)])

    def get_route_xlayer_xy(self, xy):
        """
        Get route layer in xgrid direction (vertical)

        Parameters
        ----------
        xy : np.array([int, int])
            coordinate

        Returns
        -------
        [str, str]
            route layer information
        """
        return self._get_route_layer(xy[0], self.xlayer)

    def get_route_ylayer_xy(self, xy):
        """
        Get route layer in ygrid direction (horizontal)

        Parameters
        ----------
        xy : np.array([int, int])
            coordinate

        Returns
        -------
        [str, str]
            route layer information
        """
        return self._get_route_layer(xy[1], self.ylayer)

    def get_vianame(self, xy):
        """
        Get the name of via on xy

        Parameters
        ----------
        xy : np.array([int, int])
            coordinate

        Returns
        -------
        str
            cellname of via
        """
        mod = np.array([np.mod(xy[0], self.xgrid.shape[0]), np.mod(xy[1], self.ygrid.shape[0])])
        for vianame, viacoord in self.viamap.items():
            if viacoord.ndim==1:
                if np.array_equal(mod, viacoord): return vianame
            else:
                for v in viacoord:
                    if np.array_equal(mod,v):
                        return vianame

    def display(self):
        """
        Display RouteGrid information
        """
        display_str="  " + self.name + " width:" + str(np.around(self.width, decimals=self.max_resolution))\
                    + " height:" + str(np.around(self.height, decimals=self.max_resolution))\
                    + " xgrid:" + str(np.around(self.xgrid, decimals=self.max_resolution))\
                    + " ygrid:" + str(np.around(self.ygrid, decimals=self.max_resolution))\
                    + " xwidth:" + str(np.around(self.xwidth, decimals=self.max_resolution))\
                    + " ywidth:" + str(np.around(self.ywidth, decimals=self.max_resolution))\
                    + " xlayer:" + str(self.xlayer)\
                    + " ylayer:" + str(self.ylayer)\
                    + " viamap:{"
        for vm_name, vm in self.viamap.items():
            display_str+=vm_name + ": " + str(vm.tolist()) + " "
        display_str+="}"
        print(display_str)

    def export_dict(self):
        """
        Export grid information in dict format

        Returns
        -------
        dict
            Grid information
        """
        export_dict=GridObject.export_dict(self)
        export_dict['xwidth'] = np.around(self.xwidth, decimals=self.max_resolution).tolist()
        export_dict['ywidth'] = np.around(self.ywidth, decimals=self.max_resolution).tolist()
        export_dict['xlayer'] = self.xlayer
        export_dict['ylayer'] = self.ylayer
        export_dict['viamap'] = dict()
        for vn, v in self.viamap.items():
            export_dict['viamap'][vn]=[]
            for _v in v:
                export_dict['viamap'][vn].append(_v.tolist())
        return export_dict

    def update_viamap(self, viamap):
        """use laygo2.GridObject.RouteGrid.viamap instead"""
        self.viamap=viamap

if __name__ == '__main__':
    lgrid=GridObject()
    print('LayoutGrid test')
    lgrid.xgrid = np.array([0.2, 0.4, 0.6])
    lgrid.ygrid = np.array([0, 0.4, 0.9, 1.2, 2, 3])
    lgrid.width = 1.2
    lgrid.height = 3.2
    phycoord = np.array([[-0.2, -0.2], [0, 2], [4,2.2], [0.5, 1.5], [1.3, 3.6], [8,2.3]])
    print("  xgrid:" + str(lgrid.xgrid) + " width:" + str(lgrid.width))
    print("  ygrid:" + str(lgrid.ygrid) + " height:" + str(lgrid.height))
    print('physical grid to abstract grid')
    print("  input:"+str(phycoord.tolist()))
    abscoord=lgrid.get_absgrid_coord_xy(phycoord)
    print("  output:"+str(abscoord.tolist()))
    print('abstract grid to physical grid')
    phycoord=lgrid.get_phygrid_xy(abscoord).tolist()
    print("  output:"+str(phycoord))
'''
'''
class Grid():
    """
    Basic layout grid.
    """

    name = None
    """str: the name of the grid."""

    elements = None
    """list(numpy.ndarray): the list contains the physical coordinates as numpy array."""

    def __getitem__(self, pos):
        """Returns the physical coordinate corresponding to the pos parameter."""
        if isinstance(self.elements, list):  # multi-dimensional grid
            p = np.asarray(pos)
            p_divisor = [np.shape(e)[0] - 1 for e in self.elements]
            # get the modular of pos
            p_mod = np.remainder(p, p_divisor)
            # return the corresponding coordinates
            return np.array([self.elements[i][p_mod[i]] for i in range(len(self.elements))])
        else:  # 1d grid
            return self.elements(pos)

    def __iter__(self):
        """Iterator function. Directly mapped to its elements."""
        return self.elements.__iter__()

    def __next__(self):
        """Iterator function. Directly mapped to its elements."""
        return self.elements.__next__()

    #type="native"
    #"""str: the type of the grid object. Can be "native", "route", "placement". """


    _xy = np.array([[0, 0], [0, 0]])
    """numpy.ndarray(dtype=numpy.int): the internal variable of xy."""

    def get_xy(self):
        """numpy.ndarray(dtype=int): gets the xy."""
        return self._xy

    def set_xy(self, value):
        """numpy.ndarray(dtype=int): sets the xy."""
        self._xy = np.asarray(value, dtype=np.int)

    xy = property(get_xy, set_xy)
    """numpy.ndarray(dtype=int): the size of the grid object."""

    xgrid = np.array([])
    """numpy.array(dtype=int): the valid x coordinates of the grid."""

    ygrid = np.array([])
    """numpy.array(dtype=int): the valid y coordinates of the grid."""

    def xy0(self):
        """numpy.ndarray(dtype=int): returns the primary corner of the grid."""
        return self.xy[0]

    def xy1(self):
        """numpy.ndarray(dtype=int): returns the secondary corner of the grid."""
        return self.xy[1]

    @property
    def height(self):
        """float: the height of the grid."""
        return abs(self.xy[1, 1]-self.xy[0, 1])

    @property
    def width(self):
        """float: the width of the grid."""
        return abs(self.xy[1, 0]-self.xy[0, 0])

    @property
    def height_vec(self):
        """numpy.ndarray(dtype=int): Returns np.array([0, height])."""
        return np.array([0, self.height])

    @property
    def width_vec(self):
        """numpy.ndarray(dtype=int): Returns np.array([width, 0])."""
        return np.array([self.width, 0])

    def __init__(self, name, xy, xgrid=np.array([0]), ygrid=np.array([0])):
        """
        Constructor.

        Parameters
        ----------
        name : str
            The name of the template.
        xy : numpy.ndarray(dtype=int)
            The size of the grid.
        xgrid : numpy.ndarray(dtype=int)
        ygrid : numpy.ndarray(dtype=int)
        """
        self.name = name
        self.xy = xy
        self.xgrid = xgrid
        self.ygrid = ygrid

    def summarize(self):
        """Returns the summary of the grid information."""
        return self.__repr__() + " " \
                                 "name: " + self.name + ", " + \
               "class: " + self.__class__.__name__ + ", " + \
               " width:" + str(self.width) + \
               " height:" + str(self.height)

    def export(self, fmt='dict'):
        """Exports the object information."""
        if fmt == 'dict':
            return self.export_dict()

    def export_dict(self):
        """Exports the object information as a dictionary."""
        export_dict={'type': self.type,
                     'xy0': self.xy0.tolist(),
                     'xy1': self.xy1.tolist(),
                     'xgrid': self.xgrid.tolist(),
                     'ygrid': self.ygrid.tolist(),
                     }
        return export_dict

    def _add_grid(self, grid, v):
        """
        add a grid coordinate

        Parameters
        ----------
        grid : np.array
            grid array
        v : float
            value

        Returns
        -------
        np.array
            updated grid array
        """
        grid.append(v)
        grid.sort()
        return grid

    def add_xgrid(self, x):
        """
        add a coordinate value to grid in x direction

        Parameters
        ----------
        x : float
            value to be added
        """
        self.xgrid=self._add_grid(self.xgrid, x)

    def add_ygrid(self, y):
        """
        add a coordinate value to grid in y direction

        Parameters
        ----------
        y : float
            value to be added
        """
        self.ygrid=self._add_grid(self.ygrid, y)

    def get_xgrid(self):
        """use laygo2.GridObject.GridObject.xgrid instead"""
        return self.xgrid

    def get_ygrid(self):
        """use laygo2.GridObject.GridObject.ygrid instead"""
        return self.ygrid

    #abstract to physical conversion functions
    def _get_absgrid_coord(self, v, grid, size, method='ceil'):
        """
        Convert physical value to abstract value on grid. Since physical values are continuous and grid values are
        discrete, boundary conditions are need to be defined for the conversion.
        Default (and only supported in the current version) converting method is ceil, which is described as follows:
        #   physical grid: 0----grid0----grid1----grid2----...----gridN---size
        # abstracted grid: 0  0   0    1   1    2   2           N   N   N+1
        The ceiling method works well with stacked grids. For example, in the example, phyical values ranging from
        (larger than) GridN to (equal to) gridN+1 (grid0 of the second stack) will be converted to N+1.

        Parameters
        ----------
        v : float
            grid value
        grid : np.array
            grid array
        size : float
            grid size
        method : str, optional
            converting method

        Returns
        -------
        int
            abstract grid value
        """
        quo=np.floor(np.divide(v, size))
        mod=v-quo*size #mod=np.mod(v, size) not working well
        mod_ongrid=np.searchsorted(grid+1e-10, mod) #add 1e-10 to handle floating point precision errors
        #print('physical:' + str(v.tolist()) + ' size:'+ str(size) +
        #      ' quo:' + str(quo.tolist()) + ' mod:' + str(mod) +
        #      ' abs:' + str(np.add(np.multiply(quo,grid.shape[0]), mod_ongrid).tolist()))
        return np.add(np.multiply(quo,grid.shape[0]), mod_ongrid)

    def get_absgrid_coord_x(self, x): return self.get_absgrid_x(x)
    def get_absgrid_x(self, x):
        """
        Convert a physical x coordinate to a corresponding value in abstract grid

        Parameters
        ----------
        x : float
            value

        Returns
        -------
        int
            converted value
        """
        return self._get_absgrid_coord(x, self.xgrid, self.width).astype(int)

    def get_absgrid_coord_y(self, y): return self.get_absgrid_y(y)
    def get_absgrid_y(self, y):
        """
        Convert a physical y coordinate to a corresponding value in abstract grid

        Parameters
        ----------
        y : float
            value

        Returns
        -------
        int
            converted value
        """
        return self._get_absgrid_coord(y, self.ygrid, self.height).astype(int)

    def get_absgrid_coord_xy(self, xy): return self.get_absgrid_xy(xy)
    def get_absgrid_xy(self, xy):
        """
        Convert a physical xy coordinate to a corresponding vector in abstract grid

        Parameters
        ----------
        xy : np.array([float, float])

        Returns
        -------
        np.array([int, int])
        """
        _xy=np.vstack((self.get_absgrid_x(xy.T[0]), self.get_absgrid_y(xy.T[1]))).T
        if _xy.shape[0]==1: return _xy[0]
        else: return _xy

    def get_absgrid_coord_region(self, xy0, xy1): return self.get_absgrid_region(xy0, xy1)
    def get_absgrid_region(self, xy0, xy1):
        """
        Convert a physical regin to a corresponding region in abstract grid

        Parameters
        ----------
        xy0 : np.array([float, float])
            first coordinate
        xy1 : np.array([float, float])
            second coordinate

        Returns
        -------
        np.array([[int, int], [int, int]])
            converted coordinate
        """
        _xy0 = np.vstack((self.get_absgrid_coord_x(xy0.T[0]), self.get_absgrid_coord_y(xy0.T[1]))).T
        _xy1 = np.vstack((self.get_absgrid_coord_x(xy1.T[0]), self.get_absgrid_coord_y(xy1.T[1]))).T
        if _xy0.shape[0] == 1: _xy0 = _xy0[0]
        if _xy1.shape[0] == 1: _xy1 = _xy1[0]
        #upper right boundary adjust
        #check by re-converting to physical grid and see if the points are within original [xy0, xy1]
        #xy0_check = self.get_phygrid_coord_xy(_xy0)[0]
        #xy1_check = self.get_phygrid_coord_xy(_xy1)[0]
        xy0_check = self.get_phygrid_xy(_xy0)
        xy1_check = self.get_phygrid_xy(_xy1)
        xy0_check = np.around(xy0_check, decimals=self.max_resolution)
        xy1_check = np.around(xy1_check, decimals=self.max_resolution)
        xy0 = np.around(xy0, decimals=self.max_resolution)
        xy1 = np.around(xy1, decimals=self.max_resolution)
        #print("phy:" + str(xy0) + " " + str(xy1) + " abs:" + str(_xy0) + " " + str(_xy1) + " chk:" + str(xy0_check) + " " + str(xy1_check))
        if xy0_check[0] > xy0[0] and xy0_check[0] > xy1[0]: _xy0[0] -= 1
        if xy1_check[0] > xy0[0] and xy1_check[0] > xy1[0]: _xy1[0] -= 1
        if xy0_check[1] > xy0[1] and xy0_check[1] > xy1[1]: _xy0[1] -= 1
        if xy1_check[1] > xy0[1] and xy1_check[1] > xy1[1]: _xy1[1] -= 1
        #if _xy1[1]==7:
        #    print("phy:"+str(xy0)+" "+str(xy1)+" abs:"+str(_xy0)+" "+str(_xy1)+" chk:"+str(xy0_check)+" "+str(xy1_check))
        #print(xy1)

        return(np.vstack((_xy0, _xy1)))

    # physical to abstract conversion functions
    def _get_phygrid_coord(self, v, grid, size):
        """
        Internal function for abstract to physical coordinate conversions

        Parameters
        ----------
        v : int
            value in abstract coordinate
        grid : np.array
            grid array
        size : float
            grid size

        Returns
        -------
        float
            value in physical coordinate
        """
        quo = np.floor(np.divide(v, grid.shape[0]))
        mod = np.mod(v, grid.shape[0])  # mod = v - quo * grid.shape[0]
        return np.add(np.multiply(quo, size), np.take(grid, mod))

    def get_phygrid_coord_x(self, x): return self.get_phygrid_x(x)
    def get_phygrid_x(self, x):
        """
        Get the physical value of a abstract x coordinate

        Parameters
        ----------
        x : int
            abstract coordinate value

        Returns
        -------
        float
            physical coordinate value
        """
        return self._get_phygrid_coord(x, self.xgrid, self.width)

    def get_phygrid_coord_y(self, y): return self.get_phygrid_y(y)
    def get_phygrid_y(self, y):
        """
        Get the physical value of a abstract y coordinate

        Parameters
        ----------
        y : int
            abstract coordinate value

        Returns
        -------
        float
            physical coordinate value
        """
        return self._get_phygrid_coord(y, self.ygrid, self.height)

    def get_phygrid_coord_xy(self, xy): return self.get_phygrid_xy(xy)
    def get_phygrid_xy(self, xy):
        """
        Get the physical value of a abstract vector

        Parameters
        ----------
        xy : np.array([int, int])
            abstract coordinate vector

        Returns
        -------
        np.array([float, float])
            physical coordinate vector
        """
        if xy.ndim==1: #single coordinate
            return np.vstack((self.get_phygrid_coord_x(xy.T[0]), self.get_phygrid_coord_y(xy.T[1]))).T[0]
        else:
            return np.vstack((self.get_phygrid_coord_x(xy.T[0]), self.get_phygrid_coord_y(xy.T[1]))).T


class PlacementGrid(GridObject):
    """
    Placement grid class
    """
    type = 'placement'


class RouteGrid(GridObject):
    """
    Routing grid class
    """
    type = 'route'
    """str: type of grid. can be 'native', 'route', 'placement'"""
    xwidth = np.array([])
    """np.array: width of xgrid"""
    ywidth = np.array([])
    """np.array: width of ygrid"""
    viamap = dict()
    """dict: via map information"""
    xlayer = None
    """list: layer of xgrid"""
    ylayer = None
    """list: layer of ygrid"""

    def __init__(self, name, libname, xy, xgrid, ygrid, xwidth, ywidth, xlayer=None, ylayer=None, viamap=None):
        """
        Constructor
        """
        self.name = name
        self.libname = libname
        self.xy = xy
        self.xgrid = xgrid
        self.ygrid = ygrid
        self.xwidth = xwidth
        self.ywidth = ywidth
        self.xlayer = xlayer
        self.ylayer = ylayer
        self.viamap = viamap

    def _get_route_width(self, v, _width):
        """
        Get metal width

        Parameters
        ----------
        v : int
            value
        _width : np.array
            width vector

        Returns
        -------
        float
            route width
        """
        #quo=np.floor(np.divide(v, self._width.shape[0]))
        mod=np.mod(v, _width.shape[0])
        #if not isinstance(mod, int):
        #    print(v, _width, mod)
        return _width[round(np.round(mod))]

    def _get_route_layer(self, v, _layer):
        """
        Get metal layer

        Parameters
        ----------
        v : int
            index value
        _layer : list
            layer list

        Returns
        -------
        [str, str]
            route layer
        """
        mod=np.mod(v, len(_layer))
        return _layer[mod]

    #def get_xwidth(self): return self.xwidth
    #def get_ywidth(self): return self.ywidth
    #def get_viamap(self): return self.viamap

    def get_route_width_xy(self, xy):
        """
        Get metal width vector

        Parameters
        ----------
        xy : np.array([int, int])
            coordinate

        Returns
        -------
        np.array([float, float])
            route width vector ([xgrid, ygrid])
        """
        return np.array([self._get_route_width(xy[0], self.xwidth),
                         self._get_route_width(xy[1], self.ywidth)])

    def get_route_xlayer_xy(self, xy):
        """
        Get route layer in xgrid direction (vertical)

        Parameters
        ----------
        xy : np.array([int, int])
            coordinate

        Returns
        -------
        [str, str]
            route layer information
        """
        return self._get_route_layer(xy[0], self.xlayer)

    def get_route_ylayer_xy(self, xy):
        """
        Get route layer in ygrid direction (horizontal)

        Parameters
        ----------
        xy : np.array([int, int])
            coordinate

        Returns
        -------
        [str, str]
            route layer information
        """
        return self._get_route_layer(xy[1], self.ylayer)

    def get_vianame(self, xy):
        """
        Get the name of via on xy

        Parameters
        ----------
        xy : np.array([int, int])
            coordinate

        Returns
        -------
        str
            cellname of via
        """
        mod = np.array([np.mod(xy[0], self.xgrid.shape[0]), np.mod(xy[1], self.ygrid.shape[0])])
        for vianame, viacoord in self.viamap.items():
            if viacoord.ndim==1:
                if np.array_equal(mod, viacoord): return vianame
            else:
                for v in viacoord:
                    if np.array_equal(mod,v):
                        return vianame

    def display(self):
        """
        Display RouteGrid information
        """
        display_str="  " + self.name + " width:" + str(np.around(self.width, decimals=self.max_resolution)) \
                    + " height:" + str(np.around(self.height, decimals=self.max_resolution)) \
                    + " xgrid:" + str(np.around(self.xgrid, decimals=self.max_resolution)) \
                    + " ygrid:" + str(np.around(self.ygrid, decimals=self.max_resolution)) \
                    + " xwidth:" + str(np.around(self.xwidth, decimals=self.max_resolution)) \
                    + " ywidth:" + str(np.around(self.ywidth, decimals=self.max_resolution)) \
                    + " xlayer:" + str(self.xlayer) \
                    + " ylayer:" + str(self.ylayer) \
                    + " viamap:{"
        for vm_name, vm in self.viamap.items():
            display_str+=vm_name + ": " + str(vm.tolist()) + " "
        display_str+="}"
        print(display_str)

    def export_dict(self):
        """
        Export grid information in dict format

        Returns
        -------
        dict
            Grid information
        """
        export_dict=GridObject.export_dict(self)
        export_dict['xwidth'] = np.around(self.xwidth, decimals=self.max_resolution).tolist()
        export_dict['ywidth'] = np.around(self.ywidth, decimals=self.max_resolution).tolist()
        export_dict['xlayer'] = self.xlayer
        export_dict['ylayer'] = self.ylayer
        export_dict['viamap'] = dict()
        for vn, v in self.viamap.items():
            export_dict['viamap'][vn]=[]
            for _v in v:
                export_dict['viamap'][vn].append(_v.tolist())
        return export_dict

    def update_viamap(self, viamap):
        """use laygo2.GridObject.RouteGrid.viamap instead"""
        self.viamap=viamap

if __name__ == '__main__':
    lgrid=GridObject()
    print('LayoutGrid test')
    lgrid.xgrid = np.array([0.2, 0.4, 0.6])
    lgrid.ygrid = np.array([0, 0.4, 0.9, 1.2, 2, 3])
    lgrid.width = 1.2
    lgrid.height = 3.2
    phycoord = np.array([[-0.2, -0.2], [0, 2], [4,2.2], [0.5, 1.5], [1.3, 3.6], [8,2.3]])
    print("  xgrid:" + str(lgrid.xgrid) + " width:" + str(lgrid.width))
    print("  ygrid:" + str(lgrid.ygrid) + " height:" + str(lgrid.height))
    print('physical grid to abstract grid')
    print("  input:"+str(phycoord.tolist()))
    abscoord=lgrid.get_absgrid_coord_xy(phycoord)
    print("  output:"+str(abscoord.tolist()))
    print('abstract grid to physical grid')
    phycoord=lgrid.get_phygrid_xy(abscoord).tolist()
    print("  output:"+str(phycoord))
'''